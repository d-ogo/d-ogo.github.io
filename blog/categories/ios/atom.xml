<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Doing things the hard way...]]></title>
  <link href="http://blog.diogot.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.diogot.com/"/>
  <updated>2014-09-30T21:45:33-03:00</updated>
  <id>http://blog.diogot.com/</id>
  <author>
    <name><![CDATA[Diogo Tridapalli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift embedded runtime library increases app size]]></title>
    <link href="http://blog.diogot.com/blog/2014/09/29/swift-embedded-runtime-library-increases-app-size/"/>
    <updated>2014-09-29T23:44:55-03:00</updated>
    <id>http://blog.diogot.com/blog/2014/09/29/swift-embedded-runtime-library-increases-app-size</id>
    <content type="html"><![CDATA[<p>Since beginning Swift attracted a lot of attention, one of many questions was: How Apple will guarantee backwards compatibility in future Swift releases?</p>

<p>The response is cited a few times at Swift Blog, like the <a href="https://developer.apple.com/swift/blog/?id=14">post of 1.0 release</a>:</p>

<blockquote><p>Because your apps today embed a version of the Swift GM runtime, they will continue to run well into the future.</p></blockquote>

<p>But one thing, so far, I don&rsquo;t see people talking about is how this embedded library affect the size of an app?</p>

<!-- more -->


<p>The easiest way to discover is to create an empty project and compare the size.
I created two <em>Single View Application</em> projects using on Xcode 6.0.1. On the first image is the bundle directory of Objective-C app and on the second the Swift one.</p>

<p><img class="center" src="/images/swift-lib-overhead.jpg" width="518" height="338" title="&lsquo;App bundle files and sizes&rsquo;" ></p>

<p>The Objective-C only app bundle takes only 192 KB and the Swift app bundle 8.6 MB. The Swift binary is smaller but the runtime frameworks can be a huge overhead for many apps!</p>

<p>On the second post of Swift Blog talk about <a href="https://developer.apple.com/swift/blog/?id=2">Compatibility</a>:</p>

<blockquote><p>As Swift changes, those frameworks will be incompatible with the rest of your app. When the binary interface stabilizes in a year or two, the Swift runtime will become part of the host OS and this limitation will no longer exist.</p></blockquote>

<p>So for at least one year if you want to use Swift in your apps, you will have to accept this <em>little</em> overhead.</p>

<hr />

<p><em>Update 2014/09/30</em>: Worth to mention that the runtime libraries are embedded on every app that supports Swift, no matter the minimum deployment target.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Counting the number of midnights between two dates]]></title>
    <link href="http://blog.diogot.com/blog/2013/10/02/counting-the-number-of-midnights-between-two-dates/"/>
    <updated>2013-10-02T00:09:00-03:00</updated>
    <id>http://blog.diogot.com/blog/2013/10/02/counting-the-number-of-midnights-between-two-dates</id>
    <content type="html"><![CDATA[<p>Math with dates is always tricky, calculate the number of midnights between two days is not an exception.
Here I have extended the example from the <a href="https://developer.apple.com/library/ios/documentation/cocoa/Conceptual/DatesAndTimes/Articles/dtCalendricalCalculations.html#//apple_ref/doc/uid/TP40007836-SW8">Apple documentation</a> to avoid <code>nil</code> dates.</p>

<!-- more -->


<pre><code class="objc">- (NSInteger)midnightsBetweenFromDate:(NSDate *)startDate
                               toDate:(NSDate *)endDate
{    
    if (startDate == nil || endDate == nil)
        return NSNotFound;

    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];

    NSInteger startDay = [calendar ordinalityOfUnit:NSDayCalendarUnit
                                             inUnit:NSEraCalendarUnit
                                            forDate:startDate];

    NSInteger endDay = [calendar ordinalityOfUnit:NSDayCalendarUnit
                                           inUnit:NSEraCalendarUnit
                                          forDate:endDate];
    [calendar release];

    if (startDay == NSNotFound)
        return startDay;

    if (endDay == NSNotFound)
        return endDay;

    return endDay - startDay;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static libs with support to iOS 5 and arm64]]></title>
    <link href="http://blog.diogot.com/blog/2013/09/18/static-libs-with-support-to-ios-5-and-arm64/"/>
    <updated>2013-09-18T12:36:00-03:00</updated>
    <id>http://blog.diogot.com/blog/2013/09/18/static-libs-with-support-to-ios-5-and-arm64</id>
    <content type="html"><![CDATA[<p>With the launch of iPhone 5s Apple brings the 64-bit architecture to mobile, this brings new possibilities for the iOS platform. But there is a restriction imposed by Apple, only projects with deployment target to iOS 6.0 or higher can produce fat binaries including arm64. So the apps developer should choose between support iOS 5 and earlier or arm64, although SDK developers shouldn&rsquo;t be obligated to decide for your users! It&rsquo;s possible to produce one fat binary with all the architectures, so let&rsquo;s see one way to do it.</p>

<!-- more -->


<p>There is a <a href="https://devforums.apple.com/message/887883#887883">discussion</a> on Developer Forums where an Apple developer explains that this restriction is due to iOS 5 are not prepared to handle the fat binary headers that contain 64-bit code. Although static libraries aren&rsquo;t handled by iOS but by the linker that came with Xcode and Xcode 5 linker obviously can handle 64-bit code!</p>

<p>The idea is pretty simple, build the different architectures separated then bind them using <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/lipo.1.html">lipo</a>.
I know that is possible to do this using directly the Xcode, but I prefer to do it via command line (or Rakefile).</p>

<p>First build the binary with <code>arm</code> using <code>xcodebuild</code>:</p>

<pre><code class="bash Build arm">xcodebuild -project 'StaticLibDemo.xcodeproj' -configuration 'Release' -sdk 'iphoneos7.0' clean build ARCHS='armv7 armv7s' IPHONEOS_DEPLOYMENT_TARGET='5.0' TARGET_BUILD_DIR='./build-arm' BUILT_PRODUCTS_DIR='./build-arm'
</code></pre>

<p>Note that you must set <code>IPHONEOS_DEPLOYMENT_TARGET='5.0'</code> and <code>ARCHS='armv7 armv7s'</code>, it&rsquo;s recommended to set build and product dirs to make the things more clear, take a look at <a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html">Build Setting Reference</a> for more details what this flags means.</p>

<p>Next build for <code>arm64</code>:</p>

<pre><code class="bash Build arm64">xcodebuild -project 'StaticLibDemo.xcodeproj' -configuration 'Release' -sdk 'iphoneos7.0' clean build ARCHS='arm64' IPHONEOS_DEPLOYMENT_TARGET='7.0' TARGET_BUILD_DIR='./build-arm64' BUILT_PRODUCTS_DIR='./build-arm64'
</code></pre>

<p>Note the difference on <code>ARCHS</code> and <code>IPHONEOS_DEPLOYMENT_TARGET</code>. We also need to build for simulator, in this case we have to change the sdk to <code>iphonesimulator7.0</code> and build in two steps first for <code>i386</code>:</p>

<pre><code class="bash Build i386">xcodebuild -project 'StaticLibDemo.xcodeproj' -configuration 'Release' -sdk 'iphonesimulator7.0' clean build ARCHS='i386' IPHONEOS_DEPLOYMENT_TARGET='5.0' TARGET_BUILD_DIR='./build-i386' BUILT_PRODUCTS_DIR='./build-i386'
</code></pre>

<p>Now the tricky part! If you just change the <code>ARCHS</code> to <code>x86_86</code> depending on your Xcode setting you will got an error like: &ldquo;x86_64 is not a valid arch&rdquo;. To avoid this just add <code>VALID_ARCHS='x86_64'</code>:</p>

<pre><code class="bash Build x86_64">xcodebuild -project 'StaticLibDemo.xcodeproj' -configuration 'Release' -sdk 'iphonesimulator7.0' clean build ARCHS='x86_64' VALID_ARCHS='x86_64' IPHONEOS_DEPLOYMENT_TARGET='7.0' TARGET_BUILD_DIR='./build-x86_64' BUILT_PRODUCTS_DIR='./build-x86_64'
</code></pre>

<p>Finally we just have to create a fat binary with all the 5 architectures:</p>

<pre><code class="bash Lipo">lipo -create './build-arm/libStaticLibDemo.a' './build-arm64/libStaticLibDemo.a' './build-i386/libStaticLibDemo.a' './build-x86_64/libStaticLibDemo.a' -output 'libStaticLibDemo.a'
</code></pre>

<p>I created a working example of this, you can get it <a href="https://github.com/diogot/StaticLibDemo">here</a>.</p>
]]></content>
  </entry>
  
</feed>
